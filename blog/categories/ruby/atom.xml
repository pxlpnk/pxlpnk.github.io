<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | The Lab and Blog]]></title>
  <link href="http://pxlpnk.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://pxlpnk.github.io/"/>
  <updated>2014-03-08T00:28:34+01:00</updated>
  <id>http://pxlpnk.github.io/</id>
  <author>
    <name><![CDATA[Andreas Tiefenthaler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create an interactive console for your library with Pry]]></title>
    <link href="http://pxlpnk.github.io/blog/2014/03/07/create-a-console-for-your-library-with-pry/"/>
    <updated>2014-03-07T23:56:00+01:00</updated>
    <id>http://pxlpnk.github.io/blog/2014/03/07/create-a-console-for-your-library-with-pry</id>
    <content type="html"><![CDATA[<p>When working on a library written in Ruby the interactive part of trying and using it during development is sometimes hard and painful.
Tools like <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html">irb</a> and <a href="http://pryrepl.org/">Pry</a> can help here a lot.
In general every RubyGem should have a console to have your library right at your fingertips.
This makes learning the API and becoming a look and feel way easier if someone wants to use your code or contribute to it.</p>

<p>The easiest way to do this with Pry is to push your models into the load path, require them and start a Pry command line.</p>

<p>```ruby ./bin/console.rb</p>

<h1>!/usr/bin/env ruby</h1>

<p>$LOAD_PATH &lt;&lt; 'lib'
require 'your_models'
require 'pry'</p>

<p>Pry::CLI.parse_options
```
In combination with <a href="https://github.com/ConradIrwin/pry-rescue">pry-rescue</a> and <a href="https://github.com/nixme/pry-debugger">pry-debugger</a> or <a href="https://github.com/deivid-rodriguez/pry-byebug">pry-byebug</a> this turns into a very powerful tool to speedup your development process.
Within the console predefined structures and objects can be created to DRY up your workflow.</p>
]]></content>
  </entry>
  
</feed>
