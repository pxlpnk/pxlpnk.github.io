<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[The Lab and Blog]]></title>
  <link href="http://pxlpnk.github.io/atom.xml" rel="self"/>
  <link href="http://pxlpnk.github.io/"/>
  <updated>2014-03-08T00:38:36+01:00</updated>
  <id>http://pxlpnk.github.io/</id>
  <author>
    <name><![CDATA[Andreas Tiefenthaler]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Create an Interactive Console for Your Library With Pry]]></title>
    <link href="http://pxlpnk.github.io/blog/2014/03/07/create-a-console-for-your-library-with-pry/"/>
    <updated>2014-03-07T23:56:00+01:00</updated>
    <id>http://pxlpnk.github.io/blog/2014/03/07/create-a-console-for-your-library-with-pry</id>
    <content type="html"><![CDATA[<p>When working on a library written in Ruby the interactive part of trying and using it during development is sometimes hard and painful.
Tools like <a href="http://www.ruby-doc.org/stdlib-2.0/libdoc/irb/rdoc/IRB.html">irb</a> and <a href="http://pryrepl.org/">Pry</a> can help here a lot.
In general every RubyGem should have a console to have your library right at your fingertips.
This makes learning the API and becoming a look and feel way easier if someone wants to use your code or contribute to it.</p>

<p>The easiest way to do this with Pry is to push your models into the load path, require them and start a Pry command line.</p>

<figure class='code'><figcaption><span>./bin/console.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="vg">$LOAD_PATH</span> <span class="o">&lt;&lt;</span> <span class="s1">&#39;lib&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;your_models&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;pry&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Pry</span><span class="p">:</span><span class="ss">:CLI</span><span class="o">.</span><span class="n">parse_options</span>
</span></code></pre></td></tr></table></div></figure>


<p>In combination with <a href="https://github.com/ConradIrwin/pry-rescue">pry-rescue</a> and <a href="https://github.com/nixme/pry-debugger">pry-debugger</a> or <a href="https://github.com/deivid-rodriguez/pry-byebug">pry-byebug</a> this turns into a very powerful tool to speedup your development process.
Within the console predefined structures and objects can be created to DRY up your workflow.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploy Wordpress Using Git]]></title>
    <link href="http://pxlpnk.github.io/blog/2013/05/30/deploy-wordpress-using-git/"/>
    <updated>2013-05-30T11:59:00+02:00</updated>
    <id>http://pxlpnk.github.io/blog/2013/05/30/deploy-wordpress-using-git</id>
    <content type="html"><![CDATA[<p>A few weeks ago I came into the joy of setting up one or another Wordpress Blog. Copying files around after every change felt so 90ies and also introduced a lot of errors while working on the blog itself.</p>

<p>Being a huge fan of git I found a nice way to deploy any Wordpress blog and any static website using git. First of all you need a server with SSH access and some rights on that machine.</p>

<h4>The local part</h4>

<p>First we create a Git repository in your  Wordpress/Website folder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd </span>wordpress_blog
</span><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;Initial commit&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The remote part</h4>

<p>Create bare repository to mirror your local Wordpress source.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir blog.git <span class="o">&amp;&amp;</span> <span class="nb">cd </span>blog.git
</span><span class='line'>git init --bare
</span></code></pre></td></tr></table></div></figure>


<p>Keep this repository separated from any the webroot and do not make it accessible to the outside world in any way.</p>

<p>Now we need to create the directory where the blog should be deployed to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /srv/www/blog/
</span></code></pre></td></tr></table></div></figure>


<p>and add the <code>post-receive</code> hook by adding the following to the <code>blog.git/hooks/post-receive</code> file and making it executable <code>chmod +x blog.git/hooks/post-receive</code>.</p>

<figure class='code'><figcaption><span>post-receive hook</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'><span class="nv">GIT_WORK_TREE</span><span class="o">=</span>/srv/www/blog git checkout -f
</span></code></pre></td></tr></table></div></figure>


<h4>The deployment part</h4>

<p>Now we need to add the new remote we just created to your repository and push our source code.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git remote add blog ssh://blog.example.com/home/USER/blog.git
</span><span class='line'>git push blog +master:refs/heads/master
</span></code></pre></td></tr></table></div></figure>


<p>To deploy your changes now you need to commit them and then push to your remote.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git push blog
</span></code></pre></td></tr></table></div></figure>


<p>After a successfully running the last command your changes should be in <code>/srv/www/blog/</code>.</p>
]]></content>
  </entry>
  
</feed>
